# Production Docker Compose Configuration
version: '3.8'

services:
  # === APPLICATION SERVICE ===
  app:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: pipelinepro-app
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://pipelinepro:${DB_PASSWORD}@db:5432/pipelinepro_prod
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - API_KEY=${API_KEY}
      - LOG_LEVEL=INFO
    volumes:
      - app_logs:/app/logs
      - app_data:/app/instance
      - app_backups:/app/backups
    ports:
      - "80:80"
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - pipelinepro-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # === DATABASE SERVICE ===
  db:
    image: postgres:15-alpine
    container_name: pipelinepro-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=pipelinepro_prod
      - POSTGRES_USER=pipelinepro
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/production/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - pipelinepro-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pipelinepro -d pipelinepro_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # === REDIS SERVICE ===
  redis:
    image: redis:7-alpine
    container_name: pipelinepro-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - pipelinepro-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # === NGINX LOAD BALANCER ===
  nginx:
    image: nginx:alpine
    container_name: pipelinepro-nginx
    restart: unless-stopped
    volumes:
      - ./docker/production/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/production/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "443:443"
      - "80:80"
    depends_on:
      - app
    networks:
      - pipelinepro-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'

  # === MONITORING SERVICE ===
  monitoring:
    image: prom/prometheus:latest
    container_name: pipelinepro-monitoring
    restart: unless-stopped
    volumes:
      - ./docker/production/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - pipelinepro-network

  # === LOG AGGREGATION ===
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: pipelinepro-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - pipelinepro-network

  # === BACKUP SERVICE ===
  backup:
    image: postgres:15-alpine
    container_name: pipelinepro-backup
    restart: "no"
    environment:
      - PGPASSWORD=${DB_PASSWORD}
    volumes:
      - app_backups:/backups
      - ./docker/production/backup.sh:/backup.sh:ro
    command: /bin/sh -c "while true; do sleep 86400; done"
    depends_on:
      - db
    networks:
      - pipelinepro-network

# === VOLUMES ===
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  app_logs:
    driver: local
  app_data:
    driver: local
  app_backups:
    driver: local
  nginx_logs:
    driver: local

# === NETWORKS ===
networks:
  pipelinepro-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
