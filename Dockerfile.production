# Production Dockerfile for PipLinePro
# Multi-stage build for optimized production image

# === BUILD STAGE ===
FROM node:18-alpine AS frontend-builder

WORKDIR /app/frontend

# Copy package files
COPY frontend/package*.json ./

# Install dependencies
RUN npm ci --only=production

# Copy frontend source
COPY frontend/ ./

# Build frontend
RUN npm run build

# === PYTHON STAGE ===
FROM python:3.11-slim AS backend-builder

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

WORKDIR /app

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements and install Python dependencies
COPY requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

# === PRODUCTION STAGE ===
FROM python:3.11-slim AS production

# Set production environment variables
ENV FLASK_ENV=production \
    FLASK_APP=app.py \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1

# Create non-root user
RUN groupadd -r pipeline && useradd -r -g pipeline pipeline

# Install production dependencies
RUN apt-get update && apt-get install -y \
    curl \
    nginx \
    supervisor \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy Python dependencies from builder
COPY --from=backend-builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=backend-builder /usr/local/bin /usr/local/bin

# Copy application code
COPY --chown=pipeline:pipeline . .

# Copy built frontend
COPY --from=frontend-builder --chown=pipeline:pipeline /app/frontend/dist ./static

# Create necessary directories
RUN mkdir -p /app/logs /app/instance /app/backups /var/log/supervisor \
    && chown -R pipeline:pipeline /app /var/log/supervisor

# Copy production configuration files
COPY docker/production/nginx.conf /etc/nginx/nginx.conf
COPY docker/production/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY docker/production/gunicorn.conf.py ./gunicorn.conf.py

# Set proper permissions
RUN chmod +x docker/production/entrypoint.sh

# Switch to non-root user
USER pipeline

# Expose ports
EXPOSE 8000 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8000/health || exit 1

# Start services
CMD ["/app/docker/production/entrypoint.sh"]
